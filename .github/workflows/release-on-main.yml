name: Build and Release on main

on:
  push:
    branches:
      - main

concurrency:
  group: release-on-main
  cancel-in-progress: false

jobs:
  build_release:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Resolve Gradle version and download distribution
        id: gradle
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          if [[ -f gradle/wrapper/gradle-wrapper.properties ]]; then
            VERSION=$(sed -n 's/.*gradle-\([0-9.]*\)-.*/\1/p' gradle/wrapper/gradle-wrapper.properties | head -n1 || true)
          fi
          if [[ -z "$VERSION" ]]; then VERSION="7.3"; fi
          echo "Using Gradle ${VERSION}"
          URL="https://services.gradle.org/distributions/gradle-${VERSION}-bin.zip"
          curl -sSfL "$URL" -o gradle.zip
          unzip -q gradle.zip -d "$HOME/gradle"
          rm -f gradle.zip
          echo "cmd=$HOME/gradle/gradle-${VERSION}/bin/gradle" >> "$GITHUB_OUTPUT"

      - name: Verify Gradle version
        run: ${{ steps.gradle.outputs.cmd }} --version

      - name: Bump mod_version (patch) in gradle.properties
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          FILE="gradle.properties"

          # Read current mod_version
          LINE="$(grep '^mod_version=' "$FILE" | head -n1 || true)"
          if [[ -z "$LINE" ]]; then
            echo "mod_version not found in $FILE" >&2
            exit 1
          fi
          CURRENT="${LINE#mod_version=}"

          # Split base and optional suffix after first dash
          BASE="${CURRENT%%-*}"
          SUFFIX=""
          if [[ "$CURRENT" == *"-"* ]]; then
            SUFFIX="${CURRENT#*-}"
          fi

          # Split base into major.minor.patch and bump patch
          IFS='.' read -r MAJOR MINOR PATCH <<<"$BASE"
          if [[ -z "${PATCH:-}" ]]; then
            echo "Unexpected version format: $CURRENT" >&2
            exit 1
          fi
          NEW_PATCH=$((PATCH + 1))
          NEW_BASE="${MAJOR}.${MINOR}.${NEW_PATCH}"

          if [[ -n "$SUFFIX" && "$SUFFIX" != "$CURRENT" ]]; then
            NEW_VERSION="${NEW_BASE}-${SUFFIX}"
          else
            NEW_VERSION="${NEW_BASE}"
          fi

          # Apply new version
          sed -i "s/^mod_version=.*/mod_version=${NEW_VERSION}/" "$FILE"

          # Capture archives_base_name for artifact path
          ARCHIVE_BASE="$(grep '^archives_base_name=' "$FILE" | cut -d'=' -f2)"

          echo "new_version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          echo "archive_base=${ARCHIVE_BASE}" >> "$GITHUB_OUTPUT"

      - name: Build (retry with dependency refresh)
        shell: bash
        run: |
          set -euo pipefail
          GRADLE_CMD="${{ steps.gradle.outputs.cmd }}"
          attempt() { "$GRADLE_CMD" --no-daemon --stacktrace --warning-mode all --refresh-dependencies clean build; }
          if attempt; then
            echo "Build succeeded on first attempt."
          else
            echo "Build failed, retrying once after cleaning caches..."
            rm -rf "$HOME/.gradle/caches" || true
            attempt
          fi

      - name: Commit version bump and tag
        env:
          NEW_VERSION: ${{ steps.bump.outputs.new_version }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add gradle.properties
          if ! git diff --cached --quiet; then
            git commit -m "chore: bump mod_version to ${NEW_VERSION} [skip ci]"
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            git push origin HEAD:main
            git push origin "v${NEW_VERSION}"
          else
            echo "No changes to commit."
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: v${{ steps.bump.outputs.new_version }}
          files: |
            build/libs/${{ steps.bump.outputs.archive_base }}-${{ steps.bump.outputs.new_version }}*.jar
            build/libs/${{ steps.bump.outputs.archive_base }}-${{ steps.bump.outputs.new_version }}*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
